上一个小节给出了一个方案，对于只有GUISys这一个错误处理者是很完美的，
但是情况往往不是这样的。前面也曾经提到过，对于发生的错误，除了要通知系统的使用者外，还要进行其他的处理，
比如：试图恢复，记如日志等。可以看出，这些处理方法和把错误通告给使用者是非常不同的，
完全没有办法仅仅用一个handle方法来统一所有的不同的处理。
但是，如果我们在ErrorBase中增加不同的处理方法声明，在具体的错误类中，
根据自身的需要来相应的实现这些方法，好像也是一个不错的方案。










读者可能已经注意到，这种做法其实也不是十分符合OCP，虽然它把变化局限在ErrorBase这个类层次架构中，
但是增加新的处理方法，还是更改了已经存在的ErrorBase类。
其实，这种设计方法，还违反了另外一个著名的面向对象的设计原则：SRP（Single Responsibility Principle）。
这个原则的核心含意是：一个类应该有且仅有一个职责。
关于职责的含意，面向对象大师Robert.C Martin有一个著名的定义：所谓一个类的职责是指引起该类变化的原因，
如果一个类具有一个以上的职责，那么就会有多个不同的原因引起该类变化，其实就是耦合了多个互不相关的职责，
就会降低这个类的内聚性。错误类的职责就是，保存和自己相关的错误状态，并且提供方法用于获取这些状态。
上面的设计中把不同的处理方法也放到错误类中，从而增加了错误类的职责，这样即使和错误类本身没有关系的对于错误处理方式的变化，
增加、修改都会导致错误类的修改。这种设计方法一样会在需求变化时，带来没有预料到的问题。
那么能否将对错误的处理方法从中剥离出来呢？
如果读者比较熟悉设计模式（这里的熟悉是指，设计模式的意图、动机，而不是指怎样去实现一个具体的设计模式），
应该会隐隐约约感觉到一个更好的设计方案即将出现。