一个完善的软件系统，必须要对出现的错误进行相应的处理，只有这样才能使系统足够的健壮，
我准备以软件系统中对于错误的处理为例，来展示我所使用的思路、方法。

在一个分布式的网管系统中，一个操作往往不会一定成功，常常会因为这样或者那样的原因失败，
此时我们就要根据失败的原因相应的处理，使错误的影响局限在最小的范围内，最好能够恢复而不影响系统的正常运行，
还有一点很重要，那就是在对错误进行处理的同时，一定不要忘记通知系统的管理者，
因为只有管理者才有能力对错误进行进一步的分析，从而查找出错误的根源，从根本上解决错误。

下面我就从错误处理的通告管理者部分入手，开始我们的旅程。假定一个在一个分布式环境中访问数据库的操作，
那么就有可能因为通信的原因或者数据库本身的原因失败，此时我们要通过用户界面来通知管理者发生的错误








熟悉面向对象的读者很快就会发现上面的代码是典型的结构化的方法，结构化的方法是以具体的功能为核心来组织程序的结构，
它的封装度仅为1级，即仅有对于特定的功能的封装（函数）。这使得结构化的方法很难适应需求的变化，
面向对象的方法正是在这一点上优于结构化的方法。在面向对象领域，是以对象来组成程序结构的，一个对象有自己的职责，
通过对象间的交互来完成系统的功能，这使得它的封装度至少为2级，即封装了为完成自己职责的方法和数据。
另外面向对象的方法还支持更高层次的封装，比如：通过对于不同的具体对象的共同的概念行为进行描述，
我们可以达到3级的封装度－ 抽象的类（在Java中就是接口）。
封装的层次越高，抽象的层次就越高，使得设计、代码有越高的弹性，越容易适应变化。

考虑对上一节中的代码，如果在系统的开发过程中发现需要对一种新的错误进行处理，
比如：用户认证错误，我们该如何做使得我们的系统能够增加对于此项功能的需求呢？
一种比较简单、直接的做法就是在增加一条用来处理此项错误的case语句。是的，这种方法的确能够工作，
但是这样做是要付出代价的。

首先，随着系统的进一步开发，可能会出现更多的错误类型，那么就会导致对于错误的处理部分代码冗长，不利于维护。
其次，也是最根本的一点，修改已经能够工作的代码，很容易引入错误，并且在很多的情况下，错误都是在不经意下引入的，
对于这种类型的错误很难定位。有调查表明，我们在开发过程中，用于修正错误的时间并不多，大部分的时间是在调试、发现错误。
在面向对象领域，有一个很著名的原则：OCP（Open-Closed Principle），
它的核心含意是：一个好的设计应该能够容纳新的功能需求的增加，但是增加的方式不是通过修改又有的模块（类），
而是通过增加新的模块（类）来完成的。如果一个设计能够遵循OCP，那么就能够有效的避免上述的问题。

要是一个设计能够符合OCP原则，就要求我们在进行设计时不能简单的以功能为核心。
要实现OCP的关键是抽象，抽象表征了一个固定的行为，但是对于这个行为可以有很多个不同的具体实现方法。
通过抽象，我们就可以用一个固定的抽象的概念来代替哪些容易变化的数量众多的具体的概念，
并且使得原来依赖于哪些容易变化的概念的模块，依赖于这个固定的抽象的概念，
这样的结果就是：系统新的需求的增加，仅仅会引起具体的概念的增加，而不会影响依赖于具体概念的抽象体的其他模块。
在实现的层面上，抽象体是通过抽象类来描述的，在Java中是接口（interface）。