享元模式(Flyweight)：

定义：运用共享技术有效的支持大量细粒度的对象


享元模式可以避免大量非常相似类的开销。在程序设计中，有时需要生成大量细粒度的类实例来表示数据。
如果能发现这些实例除了几个参数外基本上都是相同的，有时就能够大幅度的减少需要实例化的类的数量。
如果能把那些参数移到类实例的外面，在方法调用时将它们传递进来，就可以通过共享大幅度地减少单个实例的数目。

享元模式 Flyweight执行时所需要的状态是有内部的也可能有外部的，内部状态存储于ConcreteFlyweight对象之中，
而外部状态则应该考虑由客户端对象存储或计算，当调用Flyweight对象的操作时，将该状态传递给它。


内部状态：在享元对象内部并且不会随环境改变而改变的共享部分
外部状态：随环境改变而改变的、不可以共享的状态


# 享元模式使用得当，可以在很大程度上减少因创建大量相似对象所带来的内存开销。


应用场景：
1. 如果一个应用程序使用了大量的对象，而大量的这些对象造成了很大的存储开销时就应该考虑使用；
2. 还有就是对象的大多数状态可以外部状态， 如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象，此时可以考虑使用享元模式
